[{"Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\index.tsx":"1","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\reportWebVitals.ts":"2","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\store\\history.ts":"3","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\MyLocationsPage\\MyLocations.tsx":"4","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\CategoriesPage\\Categories.tsx":"5","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\store\\index.ts":"6","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\store\\actions.ts":"7","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\Layout\\Header\\Header.tsx":"8","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\store\\reducers.ts":"9","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\store\\types.ts":"10","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\Layout\\Header\\Actions\\AddCategory.tsx":"11","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\Layout\\Header\\Actions\\EditCategory.tsx":"12","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\Layout\\Header\\Actions\\DeleteCategory.tsx":"13","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\Layout\\Header\\Actions\\ViewCategory.tsx":"14"},{"size":1132,"mtime":1612087565591,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1611738587110,"results":"17","hashOfConfig":"16"},{"size":96,"mtime":1611734921569,"results":"18","hashOfConfig":"16"},{"size":890,"mtime":1612202605494,"results":"19","hashOfConfig":"16"},{"size":2636,"mtime":1612200855069,"results":"20","hashOfConfig":"16"},{"size":355,"mtime":1611743536556,"results":"21","hashOfConfig":"16"},{"size":698,"mtime":1611743954232,"results":"22","hashOfConfig":"16"},{"size":2985,"mtime":1612198390194,"results":"23","hashOfConfig":"16"},{"size":911,"mtime":1611743868665,"results":"24","hashOfConfig":"16"},{"size":1024,"mtime":1611743522111,"results":"25","hashOfConfig":"16"},{"size":1207,"mtime":1612199971411,"results":"26","hashOfConfig":"16"},{"size":1780,"mtime":1612202472120,"results":"27","hashOfConfig":"16"},{"size":1399,"mtime":1612203005463,"results":"28","hashOfConfig":"16"},{"size":1144,"mtime":1612202550564,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1fo5co9",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},"Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\index.tsx",[],["64","65"],"Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\reportWebVitals.ts",[],"Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\store\\history.ts",[],"Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\MyLocationsPage\\MyLocations.tsx",[],"Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\CategoriesPage\\Categories.tsx",["66"],"import React, { useEffect} from 'react'\r\nimport { ICategory } from '../../type'\r\nimport { setCategories, setCategorySelectedFlag, setCategoryToUpdate } from '../../store/actions'\r\nimport { SystemState } from '../../store/types'\r\nimport { useSelector, shallowEqual, useDispatch } from \"react-redux\"\r\nimport { Dispatch } from \"redux\"\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport Header from '../Layout/Header/Header'\r\n\r\nconst MyLocations: React.FC = () => {\r\n\r\n  const storageCategories = JSON.parse(localStorage.getItem('categories') || '0');\r\n\r\n  useEffect(() => {\r\n    storageCategories !== 0 &&  \r\n      onSetCategories(storageCategories)\r\n  }, [])\r\n\r\n  const dispatch: Dispatch<any> = useDispatch()\r\n\r\n  const onSetCategories = React.useCallback(\r\n    (categories: ICategory[]) => dispatch(setCategories(categories)), [dispatch])\r\n\r\n  const onSetCategoryToUpdate = React.useCallback(\r\n    (category: ICategory) => dispatch(setCategoryToUpdate(category)), [dispatch])\r\n\r\n  const onSetCategorySelectedFlag = React.useCallback(\r\n    (isCategorySelected: boolean) => dispatch(setCategorySelectedFlag(isCategorySelected)), [dispatch])\r\n\r\n  const categoriesState: ICategory[] = \r\n    useSelector((state: SystemState) => state.categories, shallowEqual)\r\n  const categoryToUpdateState: ICategory = \r\n    useSelector((state: SystemState) => state.categoryToUpdate, shallowEqual)\r\n  const categorySelectedFlagState: boolean = \r\n    useSelector((state: SystemState) => state.isCategorySelected, shallowEqual)\r\n\r\n  const handleSelectedCategory = (_id: string) => {\r\n    const selectedCategory: ICategory | any = categoriesState.find(category => category._id ===_id)\r\n    if (selectedCategory === categoryToUpdateState && categorySelectedFlagState) {\r\n      onSetCategorySelectedFlag(false)\r\n    } else {\r\n      onSetCategoryToUpdate(selectedCategory)\r\n      onSetCategorySelectedFlag(true) \r\n    }\r\n  }\r\n\r\n  return (\r\n    <main className='App'>\r\n      <Header title='Categories' />\r\n      <ListGroup className='categoriesList'>\r\n      {categoriesState.length ?\r\n        categoriesState.map(category => \r\n          <ListGroup.Item\r\n            className='categoriesListItem'\r\n            onClick={() => handleSelectedCategory(category._id)}\r\n            active={categorySelectedFlagState && categoryToUpdateState._id === category._id}>\r\n            {category.name}\r\n          </ListGroup.Item>) :\r\n        <h3>Seems like you dont have any categories saved yet... {<br></br>}\r\n            Create categories using the add option at the header!\r\n        </h3>\r\n      }\r\n      </ListGroup>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default MyLocations;","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\store\\index.ts",[],"Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\store\\actions.ts",[],"Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\Layout\\Header\\Header.tsx",["67"],"import React, { useState } from 'react'\r\nimport { ICategory } from '../../../type'\r\nimport { setCategories, setCategorySelectedFlag } from '../../../store/actions'\r\nimport { SystemState } from '../../../store/types'\r\nimport { useSelector, shallowEqual, useDispatch } from \"react-redux\"\r\nimport { Dispatch } from \"redux\"\r\nimport AddCategory from \"./Actions/AddCategory\"\r\nimport EditCategory from './Actions/EditCategory'\r\nimport DeleteCategory from './Actions/DeleteCategory'\r\nimport ViewCategory from './Actions/ViewCategory'\r\n\r\ntype Props = {\r\n  title: string\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ title }) => {\r\n\r\n  const dispatch: Dispatch<any> = useDispatch()\r\n\r\n  const onSetCategories = React.useCallback(\r\n    (categories: ICategory[]) => dispatch(setCategories(categories)),\r\n    [dispatch]\r\n  )\r\n\r\n  const onSetCategorySelectedFlag = React.useCallback(\r\n    (isCategorySelected: boolean) => dispatch(setCategorySelectedFlag(isCategorySelected)),\r\n    [dispatch]\r\n  )\r\n\r\n  const categoriesState: ICategory[] = useSelector(\r\n    (state: SystemState) => state.categories,\r\n    shallowEqual\r\n  )\r\n\r\n  const handleSaveCategory = (e: React.FormEvent, formData: ICategory, setFormData: void): void => {\r\n    e.preventDefault();\r\n    formData._id = Date.now().toString();\r\n    const newCategoriesState: ICategory[] = categoriesState.concat(formData);\r\n    onSetCategories(newCategoriesState)\r\n    localStorage.setItem(formData._id, formData.name)\r\n  }\r\n\r\n  const handleDeleteCategory = (_id: string): void => {\r\n    localStorage.removeItem(_id)\r\n    const newCategoriesState: ICategory[] = categoriesState.filter(category => category._id !== _id);\r\n    onSetCategories(newCategoriesState)\r\n    onSetCategorySelectedFlag(false)\r\n  }\r\n\r\n  const handleEditCategory = (newCategory: ICategory): void => {\r\n    localStorage.setItem(newCategory._id, newCategory.name)\r\n    let newCategoriesState: ICategory[] = categoriesState;\r\n    newCategoriesState[newCategoriesState.findIndex(category => category._id === newCategory._id)] = newCategory;\r\n    onSetCategories(newCategoriesState)\r\n    onSetCategorySelectedFlag(false)\r\n  }\r\n\r\n  const categoryToUpdate: ICategory = useSelector(\r\n    (state: SystemState) => state.categoryToUpdate,\r\n    shallowEqual\r\n  )\r\n\r\n  const isCategorySelected: boolean = useSelector(\r\n    (state: SystemState) => state.isCategorySelected,\r\n    shallowEqual\r\n  )\r\n\r\n  return (\r\n      <header className='navbar'>\r\n        <p>{title}</p>\r\n        <AddCategory saveCategory={handleSaveCategory} />\r\n        <div className='actions'>\r\n          {isCategorySelected && <> \r\n            <EditCategory editCategory={handleEditCategory} \r\n              categoryToUpdate={categoryToUpdate} />\r\n            <DeleteCategory categoryToUpdate={categoryToUpdate}\r\n              deleteCategory={handleDeleteCategory} />\r\n            <ViewCategory categoryToUpdate={categoryToUpdate} />\r\n          </>}\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n  \r\n  export default Header;","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\store\\reducers.ts",[],"Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\store\\types.ts",["68"],"import { type } from \"os\"\r\n\r\nexport const SET_CATEGORIES = 'SET_CATEGORY'\r\nexport const SET_CATEGORY_TO_UPDATE = 'SET_CATEGORY_TO_UPDATE'\r\nexport const SET_CATEGORY_SELECTED_FLAG = 'SET_CATEGORY_SELECTED_FLAG'\r\n\r\nexport interface ICategory {\r\n  _id: string\r\n  name: string\r\n}\r\n\r\nexport interface SystemState {\r\n  categories: ICategory[]\r\n  categoryToUpdate: ICategory\r\n  isCategorySelected: boolean\r\n}\r\n\r\nexport type SystemAction = {\r\n  type: string\r\n  category?: ICategory\r\n  isCategorySelected?: boolean\r\n}\r\n\r\nexport type DispatchType = (args: SystemAction) => SystemAction\r\n\r\ninterface SetCategoryAction {\r\n  type: typeof SET_CATEGORIES,\r\n  categories: ICategory[]\r\n}\r\n\r\ninterface SetCategoryToUpdateAction {\r\n  type: typeof SET_CATEGORY_TO_UPDATE,\r\n  categoryToUpdate: ICategory\r\n}\r\n\r\ninterface SetCategorySelectedFlagAction {\r\n  type: typeof SET_CATEGORY_SELECTED_FLAG,\r\n  isCategorySelected : boolean\r\n}\r\n\r\nexport type CategoryActionTypes = SetCategoryAction | SetCategoryToUpdateAction | SetCategorySelectedFlagAction","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\Layout\\Header\\Actions\\AddCategory.tsx",[],"Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\Layout\\Header\\Actions\\EditCategory.tsx",[],"Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\Layout\\Header\\Actions\\DeleteCategory.tsx",["69"],"import React from 'react'\r\nimport { ICategory } from '../../../../type'\r\nimport DeleteImg from '../../../../assets/trash.svg'\r\n\r\nimport { Modal, Button } from 'react-bootstrap'\r\n\r\ntype Props = { \r\n  deleteCategory: (formData: ICategory | any) => void\r\n  categoryToUpdate: ICategory\r\n}\r\n\r\nconst DeleteCategory: React.FC<Props> = ({ deleteCategory, categoryToUpdate }) => {\r\n\r\n  const [deleteModalShow, setDeleteModalShow] = React.useState(false);\r\n\r\n  const DeleteModal = () => {\r\n    return (\r\n      <Modal\r\n        show={deleteModalShow}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Body>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Delete category - {categoryToUpdate.name}\r\n          </Modal.Title>\r\n          Are you sure you want to delete this category ?\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"outline-success\" onClick={() => setDeleteModalShow(false)}>Cancle</Button>\r\n          <Button variant=\"success\" onClick={() => deleteCategory(categoryToUpdate._id)}>Delete</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button variant='outline-success btn-action' onClick={() => setDeleteModalShow(true)}>\r\n        Delete\r\n      </Button>\r\n      <DeleteModal />\r\n     </>\r\n  )\r\n}\r\n  \r\nexport default DeleteCategory;","Q:\\user\\Documents\\GitHub\\MyLocations-Welldone.github.io\\client\\src\\components\\Layout\\Header\\Actions\\ViewCategory.tsx",["70"],"import React, { useState } from 'react'\r\nimport { ICategory } from '../../../../type'\r\nimport { Modal, Button } from 'react-bootstrap'\r\n\r\ntype Props = {\r\n  categoryToUpdate: ICategory\r\n}\r\n\r\nconst ViewCategory: React.FC<Props> = ({ categoryToUpdate }) => {\r\n\r\n  const [viewModalShow, setViewModalShow] = React.useState(false);\r\n\r\n  const ViewModal = () => {\r\n    return (\r\n      <Modal\r\n        show={viewModalShow}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            <p>View category details</p>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p>Name : {categoryToUpdate.name}</p>\r\n          <button className=\"btn btn-outline-success\" onClick={(e) => setViewModalShow(false)}>Close</button>\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button variant='outline-success' onClick={() => setViewModalShow(true)}>\r\n         View details\r\n      </Button>\r\n      <ViewModal />\r\n     </>\r\n  )\r\n}\r\n  \r\nexport default ViewCategory;",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":17,"column":6,"nodeType":"77","endLine":17,"endColumn":8,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"83","line":1,"column":10,"nodeType":"81","messageId":"82","endLine":1,"endColumn":14},{"ruleId":"79","severity":1,"message":"84","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":17},{"ruleId":"79","severity":1,"message":"80","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'onSetCategories' and 'storageCategories'. Either include them or remove the dependency array.","ArrayExpression",["87"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'type' is defined but never used.","'DeleteImg' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [onSetCategories, storageCategories]",{"range":"90","text":"91"},[655,657],"[onSetCategories, storageCategories]"]